{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","index","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchQuery","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","trim","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aACHC,IAAKL,EAAMG,QAAQG,OAErB,6BAAKN,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCNTC,EAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,EAASQ,GAAV,OAClB,cAAC,EAAD,CAAMR,QAASA,GAAcQ,SCJtBC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,8BACE,uBACEb,UAAU,SACVc,KAAK,SACLC,SAAUF,EACVD,YAAaA,QC0CJI,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAUFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SATtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,qDAed,WAAqB,IAAD,OAElBI,MADe,8CAEZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAG/C,WAAU,IAAD,EAC2BC,KAAKN,MAA/BH,EADD,EACCA,YACFU,EAFC,EACcrB,SACasB,QAAO,SAAC5B,GAAD,OACvCA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,cAAcE,WAGhE,OACE,sBAAKjC,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CACEa,aAAce,KAAKf,aACnBD,YAAY,4BAGd,cAAC,EAAD,CAAUJ,SAAUqB,W,GAtCVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1519fd43.chunk.js","sourcesContent":["import \"./card.style.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      src={`https://robohash.org/${props.monster.id}?set=set2`}\n      alt={props.monster.name}\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import \"./card-list.style.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster, index) => (\n      <Card monster={monster} key={index} />\n    ))}\n  </div>\n);\n","import \"./search-box.style.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <div>\n    <input\n      className=\"search\"\n      type=\"search\"\n      onChange={handleChange}\n      placeholder={placeholder}\n    />\n  </div>\n);\n","import { Component } from \"react\";\nimport \"./App.css\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchQuery: \"\",\n    };\n\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  componentDidMount() {\n    const apiUrl = \"https://jsonplaceholder.typicode.com/users\";\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { searchQuery, monsters } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchQuery.toLowerCase().trim())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n\n        <SearchBox\n          handleChange={this.handleChange}\n          placeholder=\"Search for a monster...\"\n        />\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}